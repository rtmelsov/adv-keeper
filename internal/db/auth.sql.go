// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addFile = `-- name: AddFile :one
INSERT INTO files (user_id, filename, path, size_bytes)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, filename, path, size_bytes, created_at
`

type AddFileParams struct {
	UserID    uuid.UUID
	Filename  string
	Path      string
	SizeBytes int64
}

type AddFileRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Filename  string
	Path      string
	SizeBytes int64
	CreatedAt time.Time
}

func (q *Queries) AddFile(ctx context.Context, arg AddFileParams) (AddFileRow, error) {
	row := q.db.QueryRowContext(ctx, addFile,
		arg.UserID,
		arg.Filename,
		arg.Path,
		arg.SizeBytes,
	)
	var i AddFileRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Filename,
		&i.Path,
		&i.SizeBytes,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFile = `-- name: DeleteFile :one
DELETE FROM files
WHERE id = $1 AND user_id = $2
RETURNING id
`

type DeleteFileParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteFile(ctx context.Context, arg DeleteFileParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteFile, arg.ID, arg.UserID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, pwd_phc, e2ee_pub, created_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PwdPhc,
		&i.E2eePub,
		&i.CreatedAt,
	)
	return i, err
}

const listFilesByUser = `-- name: ListFilesByUser :many
SELECT id, filename, path, size_bytes, created_at
FROM files
WHERE user_id = $1
ORDER BY created_at DESC
`

type ListFilesByUserRow struct {
	ID        uuid.UUID
	Filename  string
	Path      string
	SizeBytes int64
	CreatedAt time.Time
}

func (q *Queries) ListFilesByUser(ctx context.Context, userID uuid.UUID) ([]ListFilesByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listFilesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFilesByUserRow
	for rows.Next() {
		var i ListFilesByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.Path,
			&i.SizeBytes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const register = `-- name: Register :one
INSERT INTO users (email, pwd_phc, e2ee_pub)
VALUES ($1, $2, $3)
RETURNING id
`

type RegisterParams struct {
	Email   string
	PwdPhc  string
	E2eePub []byte
}

func (q *Queries) Register(ctx context.Context, arg RegisterParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, register, arg.Email, arg.PwdPhc, arg.E2eePub)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
